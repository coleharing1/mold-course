"use strict";(()=>{var e={};e.id=2,e.ids=[2],e.modules={20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},84770:e=>{e.exports=require("crypto")},52062:(e,r,t)=>{t.r(r),t.d(r,{originalPathname:()=>g,patchFetch:()=>x,requestAsyncStorage:()=>c,routeModule:()=>l,serverHooks:()=>h,staticGenerationAsyncStorage:()=>m});var a={};t.r(a),t.d(a,{POST:()=>d});var s=t(49303),i=t(88716),o=t(60670),n=t(87070),u=t(42023),p=t(62343);async function d(e){try{let{email:r,password:t,name:a}=await e.json();if(!r||!t)return n.NextResponse.json({error:"Email and password are required"},{status:400});if(await p._.user.findUnique({where:{email:r}}))return n.NextResponse.json({error:"User already exists"},{status:400});let s=await u.ZP.hash(t,12),i=await p._.user.create({data:{email:r,password:s,name:a||r.split("@")[0]}});return await p._.onboardingProfile.create({data:{userId:i.id}}),n.NextResponse.json({message:"User created successfully",user:{id:i.id,email:i.email,name:i.name}})}catch(e){return console.error("Registration error:",e),n.NextResponse.json({error:"Failed to create user"},{status:500})}}let l=new s.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/auth/register/route",pathname:"/api/auth/register",filename:"route",bundlePath:"app/api/auth/register/route"},resolvedPagePath:"/Users/coleharing/Cursor_Projects/Mold_detox_2/app/api/auth/register/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:c,staticGenerationAsyncStorage:m,serverHooks:h}=l,g="/api/auth/register/route";function x(){return(0,o.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:m})}},62343:(e,r,t)=>{t.d(r,{_:()=>s});let a=require("@prisma/client"),s=globalThis.prisma??new a.PrismaClient}};var r=require("../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),a=r.X(0,[276,972,23],()=>t(52062));module.exports=a})();